
/*! @file UrbanPopAgentStruct.H
    \brief Contains #UrbanPopAgent class used for reading in UrbanPop data
    File automatically generated by UrbanPop-scripts/extract_urbanpop_feather.py
*/

#pragma once

#include <stdlib.h>
#include <string.h>
#include <fstream>
#include <sstream>

using std::string;
using float32_t = float;

const size_t NUM_COLS = 17;

const int GRADE_COUNT = 17;
static string grade_descriptions[GRADE_COUNT] = {"childcare", "preschl", "kind", "1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "undergrad", "grad"};
const int ROLE_COUNT = 3;
static string role_descriptions[ROLE_COUNT] = {"nope", "worker", "student"};
const int NAICS_COUNT = 14;
static string naics_descriptions[NAICS_COUNT] = {"edu_med_sca", "con", "prf", "agr_ext", "mfg", "wfh", "ent", "fin", "ret", "srv", "adm", "utl_trn", "whl", "inf"};


static std::vector<string> split_string(const string &s, char delim) {
    std::vector<string> elems;
    std::stringstream ss(s);
    string item;
    while (std::getline(ss, item, delim)) elems.push_back(item);
    return elems;
}

struct UrbanPopAgent {
    int64_t id;
    int32_t household_id;
    int64_t home_geoid;
    float32_t home_lat;
    float32_t home_lng;
    int64_t work_geoid;
    float32_t work_lat;
    float32_t work_lng;
    int8_t age;
    int8_t sex;
    int8_t race;
    int8_t travel;
    int8_t veh_occ;
    int8_t grade;
    int8_t role;
    int8_t naics;
    int16_t school_id;

    bool read_csv(std::ifstream &f) {
        string buf;
        if (!getline(f, buf)) return false;
        if (buf[0] != '*') {
            id = -1;
            return true;
        }
        try {
            std::vector<string> tokens = split_string(buf.substr(2), ',');
            if (tokens.size() != NUM_COLS)
                throw std::runtime_error("Incorrect number of tokens, expected " + std::to_string(NUM_COLS) +
                                         " got " + std::to_string(tokens.size()));
            id = stol(tokens[0]);
            household_id = stoi(tokens[1]);
            home_geoid = stol(tokens[2]);
            home_lat = stof(tokens[3]);
            home_lng = stof(tokens[4]);
            work_geoid = stol(tokens[5]);
            work_lat = stof(tokens[6]);
            work_lng = stof(tokens[7]);
            age = stoi(tokens[8]);
            sex = stoi(tokens[9]);
            race = stoi(tokens[10]);
            travel = stoi(tokens[11]);
            veh_occ = stoi(tokens[12]);
            grade = stoi(tokens[13]);
            role = stoi(tokens[14]);
            naics = stoi(tokens[15]);
            school_id = stoi(tokens[16]);

        } catch (const std::exception &ex) {
            std::ostringstream os;
            os << "Error reading UrbanPop input file: " << ex.what() << ", line read: " << "'" << buf << "'";
            amrex::Abort(os.str());
        }
        return true;
    }

    friend std::ostream& operator<<(std::ostream& os, const UrbanPopAgent& agent) {
        os << std::fixed << std::setprecision(6);
        os << agent.id << ",";
        os << agent.household_id << ",";
        os << agent.home_geoid << ",";
        os << agent.home_lat << ",";
        os << agent.home_lng << ",";
        os << agent.work_geoid << ",";
        os << agent.work_lat << ",";
        os << agent.work_lng << ",";
        os << (int)agent.age << ",";
        os << (int)agent.sex << ",";
        os << (int)agent.race << ",";
        os << (int)agent.travel << ",";
        os << (int)agent.veh_occ << ",";
        os << (int)agent.grade << (agent.grade != -1 ? ":" + grade_descriptions[agent.grade] : "") << ",";
        os << (int)agent.role << (agent.role != -1 ? ":" + role_descriptions[agent.role] : "") << ",";
        os << (int)agent.naics << (agent.naics != -1 ? ":" + naics_descriptions[agent.naics] : "") << ",";
        os << agent.school_id;
        return os;
    }
};

